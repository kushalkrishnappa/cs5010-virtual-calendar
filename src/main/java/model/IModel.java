package model;

import dto.EventDTO;
import exception.CalendarExportException;
import exception.EventConflictException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import service.ICalendarExporter;

/**
 * IModel interface defines the methods for the model component of the MVC architecture for the
 * CalendarApp application.
 *
 * <p>It provides methods to create, edit, and retrieve events from the calendar.
 *
 * <p>It also provides methods to export the calendar to a specific format using a provided
 * exporter strategy.
 */
public interface IModel {

  /**
   * Creates a new event in the calendar based on the provided event data.
   *
   * <p>This method handles the creation of both standard time-based events and all-day events
   * depending on the presence of start and end times in the {@code eventDTO}.
   *
   * @param eventDTO    the data transfer object containing the details of the event to be created
   * @param autoDecline a boolean flag indicating whether the event creation should be automatically
   *                    declined if it conflicts with an existing event
   * @throws EventConflictException   if the event to be created, conflicts with an existing event
   *                                  and auto-decline is not enabled
   * @throws IllegalArgumentException if the provided event data is invalid
   */
  void createEvent(EventDTO eventDTO, boolean autoDecline)
      throws EventConflictException, IllegalArgumentException;

  /**
   * Edits an existing event in the calendar.
   *
   * <p>Update various attributes of an event, identified by its name, start time, and end time
   * (all fields provided).
   *
   * <p>Update recurring events if {@code endTime} is null. The events are filtered
   * starting from the provided {@code startTime}.
   *
   * <p>Update all recurring events with a name if both {@code startTime} and {@code endTime} is
   * null.
   *
   * <p>Update
   *
   * <p>The {@code parametersToUpdate} DTO contains the fields to be
   * modified.
   *
   * @param name               the name of the event to be edited
   * @param startTime          the original start time of the event to be edited
   * @param endTime            the original end time of the event to be edited
   * @param parametersToUpdate a {@link EventDTO} containing the fields and their new values to
   *                           update in the existing event
   * @return the number of events that were successfully edited
   * @throws EventConflictException   if the updated event details cause a conflict with an existing
   *                                  event.
   * @throws IllegalArgumentException if the provided edit request is invalid
   */
  Integer editEvent(String name, LocalDateTime startTime, LocalDateTime endTime,
      EventDTO parametersToUpdate) throws EventConflictException, IllegalArgumentException;


  /**
   * Gets all events in the calendar on specified date.
   *
   * @param date date to get events on
   * @return list of events on the given date
   */
  List<EventDTO> getEventsOnDate(LocalDate date);

  /**
   * Gets all events in the calendar on specified date range.
   *
   * @param start start time of the range
   * @param end   end time of the range
   * @return list of events in the given range
   */
  List<EventDTO> getEventsInRange(LocalDateTime start, LocalDateTime end);

  /**
   * Get all events in the calendar.
   *
   * @return list of all events in the calendar
   */
  List<EventDTO> getAllEvents();

  /**
   * Exports all events as string using the exporter strategy provided.
   *
   * <p>This method delegates the actual export formatting to the specified
   * {@link ICalendarExporter}.
   *
   * @param exporter the {@link ICalendarExporter} to use for exporting the string
   * @return string representing the events in the format generated by the exporter
   * @throws CalendarExportException if there is any error with the export
   */
  String exportEventsWithExporter(ICalendarExporter exporter) throws CalendarExportException;

  /**
   * Checks if there are any events scheduled that overlap with the given date and time.
   *
   * @param dateTime the dateTime to check if the user is busy
   * @return true if an event overlaps at the time, false otherwise
   */
  Boolean isBusy(LocalDateTime dateTime);
}
